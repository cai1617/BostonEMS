{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww21140\viewh9080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 # Define a new function\
# input: callsMoments: an array of moments that received calls\
# output: The number of ambulance needed\
Need<-function(CallsMoments)\{\
  amb=0;\
  if(length(CallsMoments)!=0)\{\
    while(length(CallsMoments)!=0) \{\
      # GroupingCalls\
      temp=CallsMoments[1]\
      Grouping=temp\
      index=1\
      for(i in 1:length(CallsMoments) )\{\
        if(CallsMoments[i]-temp>=20)\{\
          temp=CallsMoments[i]\
          Grouping<-append(Grouping,CallsMoments[i])\
          index<-append(index,i)\
        \}\
      \}    \
      amb=amb+1\
      # deleteCalls\
      CallsMoments<-CallsMoments[-index]\
    \}\
  \}\
  return(amb)\
\}\
\
supply<-function(average)\{\
  NumCalls<-rpois(numTest,average) # average is the average calls\
  Need_amb<-rep(0,numTest) # Initializing: all zero\
  \
  # Calling function Need():\
  for(i in 1:numTest)\{\
    CallsMoments<-sort(sample(0:59,NumCalls[i],replace=TRUE), decreasing = FALSE)\
    Need_amb[i]=Need(CallsMoments)\
  \}\
  \
  # Output:\
  # Need_amb\
  \
  MaxAmb=5 # Check what the NoWaitRatios are if amb=1,2,3...,MaxAmb.\
  NoWaitRatio<-matrix(data=0, nrow = 1, ncol = MaxAmb) # Initializing for storing the NoWaitRatio\
  for (i in 1:MaxAmb)\{# storing the NoWaitRatio\
    new<-subset(Need_amb,Need_amb[]<=i)\
    NoWaitRatio[1,i]=length(new)/numTest\
  \}\
  \
  # NoWaitRatio\
  # record the least number of ambulance that the NoWaitRatio >= 95%\
  for(i in 1:MaxAmb)\
    if(NoWaitRatio[i]>=0.93)\{\
      LeastNeed=i\
      break\
    \}  \
  # LeastNeed\
  return(LeastNeed) \
\}\
\
\
#####################################################################################################\
# Demonstration: 10000 times test; Given amb=1,2...MaxAmb, find the NoWaitRatio for 16 regions\
#####################################################################################################\
\
# Initialization and Parameters:\
numTest=10000 # the number of tests\
\
# Boston_calls_per_Day=116637 calls / 365 days = 319.5534 calls per day\
Boston_calls_hours<-c(11.55,10.51,9.46,7.18,5.84,5.73,7.37,9.78,12.51,14.28,16.04,16.65,17.55,17.87,18.03,17.78,18.12,17.95,17.23,16.64,16.28,14.94,13.79,12.66)\
\
Region_names<-c("Allston_Brighton","Back_Bay","Beacon_Hill","North_End","Charlestown","East_Boston","South_Boston","South_End","Roxbury","Dorchester_North","Dorchester_South","Roslindale","Jamaica_Plain","West_Roxbury","Hyde_Park","Mattapan","Long_Island","Other")\
Region_Percetage<-c(5.8,7.7,2.9,3.6,2.2,6.5,5.4,11.4,14.9,15.2,6.73,3.7,2.9,2.7,4,3.3,0.5,0.6)\
\
AverageCalls<-matrix(data=0, nrow = 18, ncol = 24) # Initializing: all zero\
# "18" is the number of regions, while "24" stands for 24 time intervals in a day.\
for(i in 1:18)\{\
  AverageCalls[i,]=Boston_calls_hours*Region_Percetage[i]*0.01\
\}\
\
# Decoration: Change the column and row name of AverageCall\
colnames(AverageCalls, do.NULL = FALSE);\
colnames(AverageCalls)<-colnames(AverageCalls, do.NULL = FALSE, prefix = "Hour_")\
rownames(AverageCalls)<-Region_names\
AverageCalls\
\
# Given the AverageCalls, we can find the least number of ambulance such that it satisfies "NoWaitRatios=95%" \
# Initializing: all zero\
SupplyAmb<-matrix(data=0, nrow = 18, ncol = 24) \
for(i in 1:18)\{\
  for(j in 1:24)\{\
    # Calling function supply():\
    SupplyAmb[i,j]<-supply(AverageCalls[i,j])\
  \}\
\}\
# Decoration: Change the column and row name of SupplyAmb\
colnames(SupplyAmb, do.NULL = FALSE);\
colnames(SupplyAmb)<-colnames(SupplyAmb, do.NULL = FALSE, prefix = "Hour_")\
rownames(SupplyAmb)<-Region_names\
SupplyAmb\
\
\
\
sum(SupplyAmb[,15])\
\
supply(0.870160)\
\
# --------------------------------------------------------------------------------#\
\
\
\
\
#####################################################################################################\
# Demonstration: 10000 times test; Given amb=1,2...MaxAmb, find the NoWaitRatio for one region\
#####################################################################################################\
\
# Initialization:\
numTest=10000 # the number of tests\
NumCalls<-rpois(numTest,2.4)\
\
SimResult<-matrix(data=0, nrow = numTest, ncol = 2)\
SimResult[,1]<-NumCalls\
\
# Calling function Need():\
for(i in 1:numTest)\{\
  CallsMoments<-sort(sample(0:59,NumCalls[i],replace=TRUE), decreasing = FALSE)\
  SimResult[i,2]=Need(CallsMoments)\
\}\
\
# Decoration: Change the column and row name of SimResult\
colnames(SimResult, do.NULL = FALSE)\
colnames(SimResult) <- c("The_number_of_calls","Need_Ambulance")\
rownames(SimResult)<-rownames(SimResult, do.NULL = FALSE, prefix = "day_")\
\
# Output:\
SimResult\
\
MaxAmb=8\
NoWaitRatio<-matrix(data=0, nrow = 1, ncol = MaxAmb)\
for (i in 1:MaxAmb)\{\
  new<-subset(SimResult,SimResult[,2]<=i)\
  NoWaitRatio[1,i]=length(new[,2])/numTest\
\}\
NoWaitRatio\
\
\
# --------------------------------------------------------------------------------#\
\
\
\
\
# calls<-c(5,12,16,18,20,38,50,51,52) # amb=5\
# calls<-c(5,12,18,20,25,38,42,50,51,52)# amb=5\
# calls<-c(1,3,5,7,12,18,20,25,38,42,50,51,52)# amb=7\
#calls<-CallsMoments\
\
###################################################################################\
# Demonstration: How many ambulances are needed? and what tasks for each ambulance\
###################################################################################\
# initial condition\
Initial_Arrangement<-matrix(data=0, nrow = 10, ncol = 3)\
calls<-c(5,12,20,38,50) # amb=3\
\
amb=0;\
rNum=1\
\
if(length(calls)!=0)\{\
  while(length(calls)!=0) \{\
    # GroupingCalls\
    temp=calls[1]\
    Grouping=temp\
    index=1\
    for(i in 1:length(calls) )\{\
      if(calls[i]-temp>=20)\{\
        temp=calls[i]\
        Grouping<-append(Grouping,calls[i])\
        index<-append(index,i)\
      \}\
    \}\
    # print(Grouping)\
    # print(index)\
    \
    # Storing into Initial_Arrangement\
    amb=amb+1\
    for(c in 1:length(Grouping))\{\
      Initial_Arrangement[rNum,c]=Grouping[c]\
    \}\
    rNum=rNum+1\
    # deleteCalls\
    calls<-calls[-index]\
  \}\
\}\
# get rid of zero rows\
Arrangement<-subset(Initial_Arrangement,Initial_Arrangement[,1]>0)\
# Change the column and row name\
colnames(Arrangement)<-colnames(Arrangement, do.NULL = FALSE, prefix = "Task #")\
rownames(Arrangement)<-rownames(Arrangement, do.NULL = FALSE, prefix = "Amb #")\
\
# Output:amb and Initial_Arrangement\
print(amb)\
print(Arrangement)\
# --------------------------------------------------------------------------------#\
\
\
\
\
\
###################################################################################\
# Paper Model Result:\
###################################################################################\
\
RoxAve<-c(1.72,1.56,1.41,1.07,0.87,0.85,1.10,1.46,1.86,2.13,2.39,2.48,2.61,2.66,2.68,2.65,2.70,2.67,2.57,2.48,2.42,2.22,2.05,1.89)\
Confident=0.95\
RoxSupply<-numeric(10) # initialize all the cells to zero\
for (i in 1:24 ) \{\
  RoxSupply[i]=qpois(Confident,RoxAve[i],lower.tail=TRUE, log.p=FALSE)\
\}\
RoxSupply\
sum(RoxSupply)\
# --------------------------------------------------------------------------------#\
\
\
\
\
\
###################################################################################\
# Regions Connection Graph:\
###################################################################################\
\
library(igraph)\
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) \
m=as.matrix(dat) \
g=graph.adjacency(adjmat,mode="undirected",weighted=NULL,diag=FALSE) \
plot.igraph(g)\
\
install.packages("igraph")\
library("igraph")\
x=read.csv("~/Desktop/FYD/connection_graph_final.csv", header=TRUE)\
adjmat=as.matrix(x)\
adjmat[is.na(adjmat)]<-0\
g <- graph.adjacency(adjmat,add.colnames='label')\
plot(g)\
\
t <- read.csv("~/Desktop/FYD/connection_graph.csv",header=TRUE)\
t[is.na(t)]<-0\
adjmat=as.matrix(t)\
g1 <- graph.adjacency(adjmat,add.colnames='label')\
plot(g1)\
# --------------------------------------------------------------------------------#\
\
\
}